/* GroupWidget_1cb0e0d.html generated by Svelte v1.64.1 */
var GroupWidget_1cb0e0d = (function() { "use strict";

	function range(n){
  return Array(n).fill().map((_, i) => i);
}

function data() {
  return {
    img: "",
    n_groups: 1,
    spatial_factors: [""],
    group_icons: [""],
    pres_n: undefined,

  };
};

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-9knfv-style';
		style.textContent = ".svelte-9knfv.outer,.svelte-9knfv .outer{width:224px;height:224px;display:inline-block;margin-right:2px;position:relative}.svelte-9knfv.outer img,.svelte-9knfv .outer img{position:absolute;left:0px;top:0px;width:224px;height:224px;image-rendering:pixelated}.svelte-9knfv.factor,.svelte-9knfv .factor{mix-blend-mode:lighten}.svelte-9knfv.overlay,.svelte-9knfv .overlay{filter:grayscale(100%) brightness(3);mix-blend-mode:multiply}.svelte-9knfv.group,.svelte-9knfv .group{width:80px;height:80px;margin-right:4px;display:inline-block;padding-top:10px}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var text, div, div_1, img, text_1, text_3, div_2, div_3, text_4, text_6, br, text_7, br_1, text_8, div_4;

		var if_block = (state.pres_n != state.undefined) && create_if_block(component, state);

		function mouseover_handler(event) {
			var state = component.get();
			component.set({pres_n: state.undefined});
		}

		var each_value = range(state.n_groups);

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				n: each_value[i],
				n_index: i
			}));
		}

		function mouseover_handler_1(event) {
			var state = component.get();
			component.set({pres_n: state.undefined});
		}

		var each_value_1 = range(state.n_groups);

		var each_1_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_1_blocks[i] = create_each_block_1(component, assign(assign({}, state), {
				each_value_1: each_value_1,
				n: each_value_1[i],
				n_index_1: i
			}));
		}

		function mouseleave_handler(event) {
			var state = component.get();
			component.set({pres_n: state.undefined});
		}

		return {
			c: function create() {
				text = createText("%%html_define_svelte GroupWidget\r\n\r\n");
				div = createElement("div");
				div_1 = createElement("div");
				img = createElement("img");
				text_1 = createText("\r\n    ");
				if (if_block) if_block.c();
				text_3 = createText("\r\n\r\n  ");
				div_2 = createElement("div");
				div_3 = createElement("div");
				text_4 = createText("\r\n    ");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_6 = createText("\r\n\r\n  ");
				br = createElement("br");
				text_7 = createText("\r\n  ");
				br_1 = createElement("br");
				text_8 = createText("\r\n\r\n  ");
				div_4 = createElement("div");

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].c();
				}
				this.h();
			},

			h: function hydrate() {
				img.src = state.img;
				addListener(div_1, "mouseover", mouseover_handler);
				div_1.className = "outer";
				setStyle(div_3, "width", "100%");
				setStyle(div_3, "height", "100%");
				setStyle(div_3, "background-color", "#000");
				addListener(div_2, "mouseover", mouseover_handler_1);
				div_2.className = "outer";
				addListener(div_4, "mouseleave", mouseleave_handler);
				div.className = "figure svelte-9knfv";
				setStyle(div, "width", "600px");
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(img, div_1);
				appendNode(text_1, div_1);
				if (if_block) if_block.m(div_1, null);
				appendNode(text_3, div);
				appendNode(div_2, div);
				appendNode(div_3, div_2);
				appendNode(text_4, div_2);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div_2, null);
				}

				appendNode(text_6, div);
				appendNode(br, div);
				appendNode(text_7, div);
				appendNode(br_1, div);
				appendNode(text_8, div);
				appendNode(div_4, div);

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].m(div_4, null);
				}
			},

			p: function update(changed, state) {
				if (changed.img) {
					img.src = state.img;
				}

				if (state.pres_n != state.undefined) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block(component, state);
						if_block.c();
						if_block.m(div_1, null);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				var each_value = range(state.n_groups);

				if (changed.pres_n || changed.undefined || changed.n_groups || changed.spatial_factors) {
					for (var i = 0; i < each_value.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							n: each_value[i],
							n_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(div_2, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}

				var each_value_1 = range(state.n_groups);

				if (changed.n_groups || changed.group_icons) {
					for (var i = 0; i < each_value_1.length; i += 1) {
						var each_1_context = assign(assign({}, state), {
							each_value_1: each_value_1,
							n: each_value_1[i],
							n_index_1: i
						});

						if (each_1_blocks[i]) {
							each_1_blocks[i].p(changed, each_1_context);
						} else {
							each_1_blocks[i] = create_each_block_1(component, each_1_context);
							each_1_blocks[i].c();
							each_1_blocks[i].m(div_4, null);
						}
					}

					for (; i < each_1_blocks.length; i += 1) {
						each_1_blocks[i].u();
						each_1_blocks[i].d();
					}
					each_1_blocks.length = each_value_1.length;
				}
			},

			u: function unmount() {
				detachNode(text);
				detachNode(div);
				if (if_block) if_block.u();

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].u();
				}
			},

			d: function destroy() {
				if (if_block) if_block.d();
				removeListener(div_1, "mouseover", mouseover_handler);

				destroyEach(each_blocks);

				removeListener(div_2, "mouseover", mouseover_handler_1);

				destroyEach(each_1_blocks);

				removeListener(div_4, "mouseleave", mouseleave_handler);
			}
		};
	}

	// (6:4) {{#if pres_n != undefined}}
	function create_if_block(component, state) {
		var img, img_src_value;

		return {
			c: function create() {
				img = createElement("img");
				this.h();
			},

			h: function hydrate() {
				img.src = img_src_value = state.spatial_factors[state.pres_n];
				img.className = "overlay";
			},

			m: function mount(target, anchor) {
				insertNode(img, target, anchor);
			},

			p: function update(changed, state) {
				if ((changed.spatial_factors || changed.pres_n) && img_src_value !== (img_src_value = state.spatial_factors[state.pres_n])) {
					img.src = img_src_value;
				}
			},

			u: function unmount() {
				detachNode(img);
			},

			d: noop
		};
	}

	// (13:4) {{#each range(n_groups) as n}}
	function create_each_block(component, state) {
		var n_1 = state.n, each_value = state.each_value, n_index = state.n_index;
		var if_block_anchor;

		var if_block = (state.pres_n == state.undefined || state.pres_n == n_1) && create_if_block_1(component, state);

		return {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = createComment();
			},

			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},

			p: function update(changed, state) {
				n_1 = state.n;
				each_value = state.each_value;
				n_index = state.n_index;
				if (state.pres_n == state.undefined || state.pres_n == n_1) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block_1(component, state);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}
			},

			u: function unmount() {
				if (if_block) if_block.u();
				detachNode(if_block_anchor);
			},

			d: function destroy() {
				if (if_block) if_block.d();
			}
		};
	}

	// (14:4) {{#if pres_n == undefined || pres_n == n}}
	function create_if_block_1(component, state) {
		var n_1 = state.n, each_value = state.each_value, n_index = state.n_index;
		var img, img_src_value;

		return {
			c: function create() {
				img = createElement("img");
				this.h();
			},

			h: function hydrate() {
				img.src = img_src_value = state.spatial_factors[n_1];
				img.className = "factor";
				setStyle(img, "filter", "hue-rotate(" + n_1*360/state.n_groups + "deg)");
			},

			m: function mount(target, anchor) {
				insertNode(img, target, anchor);
			},

			p: function update(changed, state) {
				n_1 = state.n;
				each_value = state.each_value;
				n_index = state.n_index;
				if ((changed.spatial_factors || changed.n_groups) && img_src_value !== (img_src_value = state.spatial_factors[n_1])) {
					img.src = img_src_value;
				}

				if (changed.n_groups) {
					setStyle(img, "filter", "hue-rotate(" + n_1*360/state.n_groups + "deg)");
				}
			},

			u: function unmount() {
				detachNode(img);
			},

			d: noop
		};
	}

	// (25:4) {{#each range(n_groups) as n}}
	function create_each_block_1(component, state) {
		var n_1 = state.n, each_value_1 = state.each_value_1, n_index_1 = state.n_index_1;
		var div, img, img_src_value;

		return {
			c: function create() {
				div = createElement("div");
				img = createElement("img");
				this.h();
			},

			h: function hydrate() {
				img.src = img_src_value = state.group_icons[n_1];
				addListener(div, "mouseover", mouseover_handler);
				div.className = "group";
				setStyle(div, "background-color", "hsl(" + n_1*360/state.n_groups + ", 80%, 50%)");

				div._svelte = {
					component: component,
					each_value_1: state.each_value_1,
					n_index_1: state.n_index_1
				};
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(img, div);
			},

			p: function update(changed, state) {
				n_1 = state.n;
				each_value_1 = state.each_value_1;
				n_index_1 = state.n_index_1;
				if ((changed.group_icons || changed.n_groups) && img_src_value !== (img_src_value = state.group_icons[n_1])) {
					img.src = img_src_value;
				}

				if (changed.n_groups) {
					setStyle(div, "background-color", "hsl(" + n_1*360/state.n_groups + ", 80%, 50%)");
				}

				div._svelte.each_value_1 = state.each_value_1;
				div._svelte.n_index_1 = state.n_index_1;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(div, "mouseover", mouseover_handler);
			}
		};
	}

	function mouseover_handler(event) {
		var component = this._svelte.component;
		var each_value_1 = this._svelte.each_value_1, n_index_1 = this._svelte.n_index_1, n_1 = each_value_1[n_index_1];
		component.set({pres_n: n_1});
	}

	function GroupWidget_1cb0e0d(options) {
		init(this, options);
		this._state = assign(assign({ undefined : undefined }, data()), options.data);

		if (!document.getElementById("svelte-9knfv-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(GroupWidget_1cb0e0d.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	GroupWidget_1cb0e0d.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function noop() {}

	function createComment() {
		return document.createComment('');
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function observe(key, callback, options) {
		var fn = callback.bind(this);

		if (!options || options.init !== false) {
			fn(this.get()[key], undefined);
		}

		return this.on(options && options.defer ? 'update' : 'state', function(event) {
			if (event.changed[key]) fn(event.current[key], event.previous && event.previous[key]);
		});
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return GroupWidget_1cb0e0d;
}());