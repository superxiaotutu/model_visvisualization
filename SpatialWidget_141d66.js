/* SpatialWidget_141d66.html generated by Svelte v1.64.1 */
var SpatialWidget_141d66 = (function() { "use strict";

	function range(n){
  return Array(n).fill().map((_, i) => i);
}

function xs1(size1) {
		return range(size1);
	}

	function ys1(size1) {
		return range(size1);
	}

	function xs2(size2) {
		return range(size2);
	}

	function ys2(size2) {
		return range(size2);
	}

	function data() {
  return {
    img: "",
    hint1: "",
    hint2: "",
    spritemap1 : "",
    size1: 1,
    spritemap2 : "",
    size2: 1,
    pos1: undefined,
    pos2: undefined,
    layer1: "",
    layer2: ""
  };
};

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-2ealpu-style';
		style.textContent = ".svelte-2ealpu.outer,.svelte-2ealpu .outer{width:224px;height:224px;display:inline-block;margin-right:2px;position:relative}.svelte-2ealpu.outer img,.svelte-2ealpu .outer img,.svelte-2ealpu.outer svg,.svelte-2ealpu .outer svg{position:absolute;left:0px;top:0px;width:224px;height:224px;image-rendering:pixelated}.svelte-2ealpu.attr,.svelte-2ealpu .attr{opacity:0.6}.svelte-2ealpu.pointer_container,.svelte-2ealpu .pointer_container{z-index:100}.svelte-2ealpu.pointer_container rect,.svelte-2ealpu .pointer_container rect{opacity:0}.svelte-2ealpu.pointer_container .selected,.svelte-2ealpu .pointer_container .selected{opacity:1;fill:none;stroke:hsl(24, 100%, 50%);stroke-width:0.1px}.svelte-2ealpu.label,.svelte-2ealpu .label{position:absolute;left:0px;top:226px;width:224px}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var text, div, div_1, img, text_1, img_1, img_1_src_value, text_2, svg, svg_viewBox_value, text_3, div_2, text_4, text_6, div_3, img_2, text_7, img_3, img_3_src_value, text_8, svg_1, svg_1_viewBox_value, text_9, div_4, text_10;

		var each_value = state.xs1;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				x: each_value[i],
				x_index: i
			}));
		}

		function mouseleave_handler(event) {
			var state = component.get();
			component.set({pos2: state.undefined});
		}

		var each_value_2 = state.xs2;

		var each_1_blocks = [];

		for (var i = 0; i < each_value_2.length; i += 1) {
			each_1_blocks[i] = create_each_block_2(component, assign(assign({}, state), {
				each_value_2: each_value_2,
				x: each_value_2[i],
				x_index_1: i
			}));
		}

		function mouseleave_handler_1(event) {
			var state = component.get();
			component.set({pos1: state.undefined});
		}

		return {
			c: function create() {
				text = createText("%%html_define_svelte SpatialWidget\r\n\r\n");
				div = createElement("div");
				div_1 = createElement("div");
				img = createElement("img");
				text_1 = createText("\r\n    ");
				img_1 = createElement("img");
				text_2 = createText("\r\n\r\n    ");
				svg = createSvgElement("svg");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_3 = createText("\r\n\r\n    ");
				div_2 = createElement("div");
				text_4 = createText(state.layer1);
				text_6 = createText("\r\n\r\n  ");
				div_3 = createElement("div");
				img_2 = createElement("img");
				text_7 = createText("\r\n    ");
				img_3 = createElement("img");
				text_8 = createText("\r\n\r\n    ");
				svg_1 = createSvgElement("svg");

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].c();
				}

				text_9 = createText("\r\n\r\n    ");
				div_4 = createElement("div");
				text_10 = createText(state.layer2);
				this.h();
			},

			h: function hydrate() {
				img.className = "img";
				img.src = state.img;
				img_1.className = "attr";
				img_1.src = img_1_src_value = (state.pos1 == state.undefined)? state.hint1 : state.spritemap1[state.pos1[1]][state.pos1[0]];
				setAttribute(svg, "class", "pointer_container");
				setAttribute(svg, "viewBox", svg_viewBox_value = "0 0 " + state.size1 + " " + state.size1);
				div_2.className = "label";
				addListener(div_1, "mouseleave", mouseleave_handler);
				div_1.className = "outer";
				img_2.className = "img";
				img_2.src = state.img;
				img_3.className = "attr";
				img_3.src = img_3_src_value = (state.pos2 == state.undefined)? state.hint2 : state.spritemap2[state.pos2[1]][state.pos2[0]];
				setAttribute(svg_1, "class", "pointer_container");
				setAttribute(svg_1, "viewBox", svg_1_viewBox_value = "0 0 " + state.size2 + " " + state.size2);
				div_4.className = "label";
				addListener(div_3, "mouseleave", mouseleave_handler_1);
				div_3.className = "outer";
				div.className = "figure svelte-2ealpu";
				setStyle(div, "width", "500px");
				setStyle(div, "height", "250px");
				setStyle(div, "contain", "strict");
			},

			m: function mount(target, anchor) {
				insertNode(text, target, anchor);
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(img, div_1);
				appendNode(text_1, div_1);
				appendNode(img_1, div_1);
				appendNode(text_2, div_1);
				appendNode(svg, div_1);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(svg, null);
				}

				appendNode(text_3, div_1);
				appendNode(div_2, div_1);
				appendNode(text_4, div_2);
				appendNode(text_6, div);
				appendNode(div_3, div);
				appendNode(img_2, div_3);
				appendNode(text_7, div_3);
				appendNode(img_3, div_3);
				appendNode(text_8, div_3);
				appendNode(svg_1, div_3);

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].m(svg_1, null);
				}

				appendNode(text_9, div_3);
				appendNode(div_4, div_3);
				appendNode(text_10, div_4);
			},

			p: function update(changed, state) {
				if (changed.img) {
					img.src = state.img;
				}

				if ((changed.pos1 || changed.undefined || changed.hint1 || changed.spritemap1) && img_1_src_value !== (img_1_src_value = (state.pos1 == state.undefined)? state.hint1 : state.spritemap1[state.pos1[1]][state.pos1[0]])) {
					img_1.src = img_1_src_value;
				}

				var each_value = state.xs1;

				if (changed.ys1 || changed.xs1 || changed.pos2 || changed.undefined) {
					for (var i = 0; i < each_value.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							x: each_value[i],
							x_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(svg, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}

				if ((changed.size1) && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + state.size1 + " " + state.size1)) {
					setAttribute(svg, "viewBox", svg_viewBox_value);
				}

				if (changed.layer1) {
					text_4.data = state.layer1;
				}

				if (changed.img) {
					img_2.src = state.img;
				}

				if ((changed.pos2 || changed.undefined || changed.hint2 || changed.spritemap2) && img_3_src_value !== (img_3_src_value = (state.pos2 == state.undefined)? state.hint2 : state.spritemap2[state.pos2[1]][state.pos2[0]])) {
					img_3.src = img_3_src_value;
				}

				var each_value_2 = state.xs2;

				if (changed.ys2 || changed.xs2 || changed.pos1 || changed.undefined) {
					for (var i = 0; i < each_value_2.length; i += 1) {
						var each_1_context = assign(assign({}, state), {
							each_value_2: each_value_2,
							x: each_value_2[i],
							x_index_1: i
						});

						if (each_1_blocks[i]) {
							each_1_blocks[i].p(changed, each_1_context);
						} else {
							each_1_blocks[i] = create_each_block_2(component, each_1_context);
							each_1_blocks[i].c();
							each_1_blocks[i].m(svg_1, null);
						}
					}

					for (; i < each_1_blocks.length; i += 1) {
						each_1_blocks[i].u();
						each_1_blocks[i].d();
					}
					each_1_blocks.length = each_value_2.length;
				}

				if ((changed.size2) && svg_1_viewBox_value !== (svg_1_viewBox_value = "0 0 " + state.size2 + " " + state.size2)) {
					setAttribute(svg_1, "viewBox", svg_1_viewBox_value);
				}

				if (changed.layer2) {
					text_10.data = state.layer2;
				}
			},

			u: function unmount() {
				detachNode(text);
				detachNode(div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				for (var i = 0; i < each_1_blocks.length; i += 1) {
					each_1_blocks[i].u();
				}
			},

			d: function destroy() {
				destroyEach(each_blocks);

				removeListener(div_1, "mouseleave", mouseleave_handler);

				destroyEach(each_1_blocks);

				removeListener(div_3, "mouseleave", mouseleave_handler_1);
			}
		};
	}

	// (9:6) {{#each xs1 as x}}
	function create_each_block(component, state) {
		var x = state.x, each_value = state.each_value, x_index = state.x_index;
		var each_anchor;

		var each_value_1 = state.ys1;

		var each_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1(component, assign(assign({}, state), {
				each_value_1: each_value_1,
				y: each_value_1[i],
				y_index: i
			}));
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				x = state.x;
				each_value = state.each_value;
				x_index = state.x_index;
				var each_value_1 = state.ys1;

				if (changed.xs1 || changed.ys1 || changed.pos2 || changed.undefined) {
					for (var i = 0; i < each_value_1.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value_1: each_value_1,
							y: each_value_1[i],
							y_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block_1(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value_1.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (10:6) {{#each ys1 as y}}
	function create_each_block_1(component, state) {
		var x = state.x, each_value = state.each_value, x_index = state.x_index, y = state.y, each_value_1 = state.each_value_1, y_index = state.y_index;
		var rect, rect_x_value, rect_y_value, rect_class_value;

		return {
			c: function create() {
				rect = createSvgElement("rect");
				this.h();
			},

			h: function hydrate() {
				addListener(rect, "mouseover", mouseover_handler);
				setAttribute(rect, "x", rect_x_value = x);
				setAttribute(rect, "y", rect_y_value = y);
				setAttribute(rect, "width", "1");
				setAttribute(rect, "height", "1");
				setAttribute(rect, "class", rect_class_value = (state.pos2 != state.undefined && x == state.pos2[0] && y == state.pos2[1])? "selected" : "");

				rect._svelte = {
					component: component,
					each_value: state.each_value,
					x_index: state.x_index,
					each_value_1: state.each_value_1,
					y_index: state.y_index
				};
			},

			m: function mount(target, anchor) {
				insertNode(rect, target, anchor);
			},

			p: function update(changed, state) {
				x = state.x;
				each_value = state.each_value;
				x_index = state.x_index;
				y = state.y;
				each_value_1 = state.each_value_1;
				y_index = state.y_index;
				if ((changed.xs1) && rect_x_value !== (rect_x_value = x)) {
					setAttribute(rect, "x", rect_x_value);
				}

				if ((changed.ys1) && rect_y_value !== (rect_y_value = y)) {
					setAttribute(rect, "y", rect_y_value);
				}

				if ((changed.pos2 || changed.undefined || changed.xs1 || changed.ys1) && rect_class_value !== (rect_class_value = (state.pos2 != state.undefined && x == state.pos2[0] && y == state.pos2[1])? "selected" : "")) {
					setAttribute(rect, "class", rect_class_value);
				}

				rect._svelte.each_value = state.each_value;
				rect._svelte.x_index = state.x_index;
				rect._svelte.each_value_1 = state.each_value_1;
				rect._svelte.y_index = state.y_index;
			},

			u: function unmount() {
				detachNode(rect);
			},

			d: function destroy() {
				removeListener(rect, "mouseover", mouseover_handler);
			}
		};
	}

	// (26:6) {{#each xs2 as x}}
	function create_each_block_2(component, state) {
		var x = state.x, each_value_2 = state.each_value_2, x_index_1 = state.x_index_1;
		var each_anchor;

		var each_value_3 = state.ys2;

		var each_blocks = [];

		for (var i = 0; i < each_value_3.length; i += 1) {
			each_blocks[i] = create_each_block_3(component, assign(assign({}, state), {
				each_value_3: each_value_3,
				y: each_value_3[i],
				y_index_1: i
			}));
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				x = state.x;
				each_value_2 = state.each_value_2;
				x_index_1 = state.x_index_1;
				var each_value_3 = state.ys2;

				if (changed.xs2 || changed.ys2 || changed.pos1 || changed.undefined) {
					for (var i = 0; i < each_value_3.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value_3: each_value_3,
							y: each_value_3[i],
							y_index_1: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block_3(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value_3.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (27:6) {{#each ys2 as y}}
	function create_each_block_3(component, state) {
		var x = state.x, each_value_2 = state.each_value_2, x_index_1 = state.x_index_1, y = state.y, each_value_3 = state.each_value_3, y_index_1 = state.y_index_1;
		var rect, rect_x_value, rect_y_value, rect_class_value;

		return {
			c: function create() {
				rect = createSvgElement("rect");
				this.h();
			},

			h: function hydrate() {
				addListener(rect, "mouseover", mouseover_handler_1);
				setAttribute(rect, "x", rect_x_value = x);
				setAttribute(rect, "y", rect_y_value = y);
				setAttribute(rect, "width", "1");
				setAttribute(rect, "height", "1");
				setAttribute(rect, "class", rect_class_value = (state.pos1 != state.undefined && x == state.pos1[0] && y == state.pos1[1])? "selected" : "");

				rect._svelte = {
					component: component,
					each_value_2: state.each_value_2,
					x_index_1: state.x_index_1,
					each_value_3: state.each_value_3,
					y_index_1: state.y_index_1
				};
			},

			m: function mount(target, anchor) {
				insertNode(rect, target, anchor);
			},

			p: function update(changed, state) {
				x = state.x;
				each_value_2 = state.each_value_2;
				x_index_1 = state.x_index_1;
				y = state.y;
				each_value_3 = state.each_value_3;
				y_index_1 = state.y_index_1;
				if ((changed.xs2) && rect_x_value !== (rect_x_value = x)) {
					setAttribute(rect, "x", rect_x_value);
				}

				if ((changed.ys2) && rect_y_value !== (rect_y_value = y)) {
					setAttribute(rect, "y", rect_y_value);
				}

				if ((changed.pos1 || changed.undefined || changed.xs2 || changed.ys2) && rect_class_value !== (rect_class_value = (state.pos1 != state.undefined && x == state.pos1[0] && y == state.pos1[1])? "selected" : "")) {
					setAttribute(rect, "class", rect_class_value);
				}

				rect._svelte.each_value_2 = state.each_value_2;
				rect._svelte.x_index_1 = state.x_index_1;
				rect._svelte.each_value_3 = state.each_value_3;
				rect._svelte.y_index_1 = state.y_index_1;
			},

			u: function unmount() {
				detachNode(rect);
			},

			d: function destroy() {
				removeListener(rect, "mouseover", mouseover_handler_1);
			}
		};
	}

	function mouseover_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, x_index = this._svelte.x_index, x = each_value[x_index];
		var each_value_1 = this._svelte.each_value_1, y_index = this._svelte.y_index, y = each_value_1[y_index];
		var state = component.get();
		component.set({pos2: [x,y], pos1: state.undefined});
	}

	function mouseover_handler_1(event) {
		var component = this._svelte.component;
		var each_value_2 = this._svelte.each_value_2, x_index_1 = this._svelte.x_index_1, x = each_value_2[x_index_1];
		var each_value_3 = this._svelte.each_value_3, y_index_1 = this._svelte.y_index_1, y = each_value_3[y_index_1];
		var state = component.get();
		component.set({pos1: [x,y], pos2: state.undefined});
	}

	function SpatialWidget_141d66(options) {
		init(this, options);
		this._state = assign(assign({ undefined : undefined }, data()), options.data);
		this._recompute({ size1: 1, size2: 1 }, this._state);

		if (!document.getElementById("svelte-2ealpu-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(SpatialWidget_141d66.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	SpatialWidget_141d66.prototype._recompute = function _recompute(changed, state) {
		if (changed.size1) {
			if (this._differs(state.xs1, (state.xs1 = xs1(state.size1)))) changed.xs1 = true;
			if (this._differs(state.ys1, (state.ys1 = ys1(state.size1)))) changed.ys1 = true;
		}

		if (changed.size2) {
			if (this._differs(state.xs2, (state.xs2 = xs2(state.size2)))) changed.xs2 = true;
			if (this._differs(state.ys2, (state.ys2 = ys2(state.size2)))) changed.ys2 = true;
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createSvgElement(name) {
		return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function createComment() {
		return document.createComment('');
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function observe(key, callback, options) {
		var fn = callback.bind(this);

		if (!options || options.init !== false) {
			fn(this.get()[key], undefined);
		}

		return this.on(options && options.defer ? 'update' : 'state', function(event) {
			if (event.changed[key]) fn(event.current[key], event.previous && event.previous[key]);
		});
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function noop() {}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return SpatialWidget_141d66;
}());